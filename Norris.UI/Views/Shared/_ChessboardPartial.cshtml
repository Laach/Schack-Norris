@using Microsoft.AspNetCore.Identity
@using Norris.UI.Models
@using Norris.Data.Data.Entities
@using Norris.Data.Models.DTO

@model ChessboardPartialViewModel
<style>
    .grid-container {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
        background-color: black;
        padding: 1px;
    }

    .grid-item {
        font-size: 10px;
    }

    .white-item {
        background-color: white;
    }

    .black-item {
        background-color: gray;
    }

    .piece-image {
        width: 100%;
    }
</style>
<div class="grid-container">
    @{string c = "white-item";
        string fileext = ".png";
    }
    @{string[,] board = @Model.GameState.Board;}
    @if (@Model.PlayerColor == 'b')
    {
        //Reverse the board
        string[,] originalBoard = board;
        string[,] reversedBoard = new string[8, 8];
        foreach (char i in Enumerable.Range(0, 8))
        {
            foreach (char j in Enumerable.Range(0, 8))
            {
                reversedBoard[i, j] = originalBoard[7 - i, 7 - j];
            }
        }
        board = reversedBoard;
    }
    @for (int i = 0; i < 8; i++)
    {
        for (int j = 0; ; j++)
        {
            int r;
            char f;
            @if (@Model.PlayerColor == 'w')
            {
                r = 8 - i;
                f = (char)((int)'a' + j);
            }
            else
            {
                r = i + 1;
                f = (char)((int)'h' - j);
            }
            <div class="grid-item @r @f @c" id="@f@r">
                <div style="position:relative;">
                    @{ string clickedPosition = f + r.ToString();}
                    <a href='@Url.Action("ClickedTile", "Game",
                                    new
                                    {
                                        clickedTile = clickedPosition,
                                        gameId = @Model.GameId,
                                        selectedTile = @Model.SelectedTile,
                                        canMove = @Model.CanMoveToTiles,
                                        catTake = @Model.CanMoveToAndTakeTiles
                                    })'>
                        <img style="position:absolute" class="piece-image" src="~/images/pieces/@board[i, j]@fileext" alt="@board[i, j]" />
                        <div>
                            @if (Model.SelectedTile == clickedPosition)
                            {
                                <img class="piece-image" src="~/images/pieces/highlight-blue.png" alt="selected tile" />
                            }
                            else if (@Model.CanMoveToTiles.Contains(clickedPosition))
                            {
                                <img class="piece-image" src="~/images/pieces/highlight-green.png" alt="selected tile" />
                            }
                            else if (@Model.CanMoveToAndTakeTiles.Contains(clickedPosition))
                            {
                                <img class="piece-image" src="~/images/pieces/highlight-red.png" alt="selected tile" />
                            }
                            else
                            {
                                <img class="piece-image" src="~/images/pieces/ee.png" alt="empty tile" />
                            }
                        </div>
                    </a>
                </div>

            </div>

            if (j == 7) { break; }

            if (c == "white-item")
            {
                c = "black-item";
            }
            else
            {
                c = "white-item";
            }
        }
    }
</div>

<script src="/js/game.js">
  updateBoard("@Model.GameId", "a2", null, [], []);

</script>